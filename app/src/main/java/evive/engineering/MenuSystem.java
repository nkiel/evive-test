/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package evive.engineering;

import java.util.HashMap;

import evive.engineering.io.IOOrderInput;
import evive.engineering.io.IOOrderOutput;
import evive.engineering.io.OrderingInput;
import evive.engineering.io.OrderingOutput;
import evive.engineering.menu.BreakfastMenu;
import evive.engineering.menu.DinnerMenu;
import evive.engineering.menu.LunchMenu;
import evive.engineering.menu.Menu;

/**
 * Whole system, controls IO and menus available
 */
public class MenuSystem {

    HashMap<String, Menu> myMenus;
    OrderingInput orderInput;
    OrderingOutput orderOutput;

    public static HashMap<String, Menu> buildMenus() {
        HashMap<String, Menu> myNewMenu = new HashMap<String, Menu>();
        myNewMenu.put("Breakfast", new BreakfastMenu());
        myNewMenu.put("Lunch", new LunchMenu());
        myNewMenu.put("Dinner", new DinnerMenu());
        return myNewMenu;
    }

    public MenuSystem() {
        this(buildMenus(), new IOOrderInput(), new IOOrderOutput());
    }
    
    public MenuSystem(HashMap<String, Menu> newMenus, OrderingInput input, OrderingOutput output) {
        this.myMenus = newMenus;
        this.orderInput = input;
        this.orderOutput = output;
    }

    public void runSystem() {
        while(orderInput.hasNextOrder()) {
            Order nextOrder = getNextOrder();
            printOrderToOutput(nextOrder);
        }
    }

    public Order getNextOrder() {
        return orderInput.getNextOrder();
    }

    public String validateOrder(Order order) {
        return myMenus.containsKey(order.menu) ? myMenus.get(order.menu).validOrder(order) : ("Unable to process: System does not contain a menu called " + order.menu);
    }

    public String printOrder(Order order) {
        return myMenus.containsKey(order.menu) ? myMenus.get(order.menu).printOrder(order) : ("Unable to process: System does not contain a menu called " + order.menu);
    }

    public void printOrderToOutput(Order order) {
        orderOutput.printOrder(printOrder(order));
    }

    public static void main(String[] args) {
        MenuSystem mSystem = new MenuSystem();
        // Keep reading input and printing output
        mSystem.runSystem();

        // Use to take in only one input
        Order nextOrder = mSystem.getNextOrder();
        mSystem.printOrderToOutput(nextOrder);
    }
}
